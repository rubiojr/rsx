import cli
import rsx
import exec
import os
import filepath

const version = "v0.3.3"
debug := false

func cleanup(dir) {
  rsx.debug('Cleaning up {dir}')
  if debug {
    rsx.debug('Debug enabled, not removing temp dir {dir}')
    return
  }
  os.remove_all(dir)
}

func go_build(dir, output) {
  bin_path := output
  if !filepath.is_abs(bin_path) {
    bin_path = filepath.join(os.getwd(), output)
  }

  cd(dir)
  rsx.debug('Working directory {dir}')

  //rsx.debug('Running go mod init rsxmod')
  //exec("go", ["mod", "init", "rsxmod"])

  rsx.debug('Running go generate')
  exec("go", ["run", "generator.go"])

  rsx.debug('Running go mod tidy')
  exec("go", ["mod", "tidy"])

  rsx.debug('Running go build -o {bin_path}...')
  exec("go", ["build", "-ldflags", "-s -w", "-o", bin_path])
}

func copy_libs(dir) {
  filepath.walk_dir("lib", func(path, dir_entry, err) {
    if dir_entry.type == "regular" {
      dest := filepath.join(dir, path)
      rsx.debug('Copying file {path} to {dest}')
      cp(path, dest)
    }
  })
}

func build(output) {
  tmpdir := os.mkdir_temp("/tmp", "rsx")
  defer cleanup(tmpdir)

  rsx.debug('Building in {tmpdir}...')

  copy := {
    "/go.mod": _goMod,
    "/go.sum": _goSum,
    "/main.go": _mainGo,
    "/importer.go": _importerGo,
    "/main.risor": os.read_file("main.risor"),
    "/lib/rsx.risor": _rsxLib,
    "/generator.go": _generatorGo,
    "/.modules": _rsModules,
  }

  if rsx.is_file(".modules") {
    rsx.debug('Found custom .modules file, appending')
    content := string(os.read_file(".modules"))
    copy["/.modules"] = copy["/.modules"]+content
  }

  os.mkdir_all(filepath.join(tmpdir, "/lib"))

  for k, v := range copy {
    os.write_file(filepath.join(tmpdir, k), v)
  }

  copy_libs(tmpdir)
  go_build(tmpdir, output)
}

cli.app({
    name: "rsx",
    usage_string: "Build risor enabled binaries",
    usage: "build Risor enabled binaries",
    version: version,
    commands: [
        cli.command({
            args: true,
            name: "new",
            description: "Create a new RSX project directory",
            action: func(ctx) {
              name := ctx.args()[0]
              os.mkdir(name)
              os.write_file(filepath.join(name, "main.risor"), "import rsx\n"+`rsx.log("Hello, World!")`)
              os.mkdir(filepath.join(name, "lib"))
              os.write_file(filepath.join(name, "/lib/rsx.risor"), _rsxLib)
              print('Created new RSX project in {name}. cd {name} to get started.')
              print("- 'rsx build' to build the project.")
              print("- 'risor --modules lib main.risor' to run the project.")
            },
        }),
        cli.command({
            args: false,
            name: "seed",
            description: "Seed the current directory",
            action: func(ctx) {
              os.write_file("main.risor", "import rsx\n"+`rsx.log("Hello, World!")`)
              os.mkdir_all("lib")
              os.write_file("lib/rsx.risor", _rsxLib)
              print("- 'rsx build' to build the project.")
              print("- 'risor --modules lib main.risor' to run the project.")
            },
        }),
        cli.command({
            args: true,
            name: "refresh",
            description: "Update the RSX library",
            action: func(ctx) {
              os.mkdir_all("lib")
              os.write_file(filepath.join("lib/rsx.risor"), _rsxLib)
            },
        }),
        cli.command({
            args: true,
            // This command is handled from the Go side.
            // It's here to provide a better help message.
            name: "run",
            description: "Run main.risor from the current directory",
        }),
        cli.command({
            args: true,
            name: "build",
            description: "Build the current directory",
            action: func(ctx) {
              if ctx.bool("debug") {
                debug = true
                os.setenv("RSX_DEBUG", "1")
                rsx.debug('RSX version {version}')
              }
              output := ctx.string("output")
              build(output)
            },
            flags: [
                cli.flag({
                    name: "output",
                    aliases: ["o"],
                    type: "string",
                    value: filepath.split(os.getwd())[-1],
                }),
                cli.flag({
                    name: "debug",
                    type: "bool",
                }),
            ],
        }),
    ],
}).run()
